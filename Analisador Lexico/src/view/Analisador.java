package view;


import analisador.AnalisadorLexico;
import analisador.Token;
import analisador.Validacoes;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.NumeroLinhas;

/**
 *
 * @author Frank Brown
 */
public class Analisador extends javax.swing.JFrame {

    JFileChooser abrirArquivo = new JFileChooser();
    
    public Analisador() {
        initComponents();
        areaCodigoFonte.setBorder(new NumeroLinhas());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelMenu = new javax.swing.JPanel();
        lbnLogo = new javax.swing.JLabel();
        btnArquivo = new swing.Button();
        btnSalvar = new swing.Button();
        btnCompilar = new swing.Button();
        btnLimpar = new swing.Button();
        painelCodigoFonte = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaCodigoFonte = new javax.swing.JTextArea();
        painelSaida = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        painelMenu.setBackground(new java.awt.Color(32, 35, 43));

        lbnLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Logo2.png"))); // NOI18N

        btnArquivo.setBackground(new java.awt.Color(32, 35, 43));
        btnArquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/file.png"))); // NOI18N
        btnArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoActionPerformed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(32, 35, 43));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/salvar.png"))); // NOI18N
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCompilar.setBackground(new java.awt.Color(32, 35, 43));
        btnCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/play.png"))); // NOI18N
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(32, 35, 43));
        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/limpar.png"))); // NOI18N
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelMenuLayout = new javax.swing.GroupLayout(painelMenu);
        painelMenu.setLayout(painelMenuLayout);
        painelMenuLayout.setHorizontalGroup(
            painelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelMenuLayout.createSequentialGroup()
                .addComponent(lbnLogo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelMenuLayout.setVerticalGroup(
            painelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbnLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
            .addComponent(btnSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
            .addComponent(btnCompilar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
            .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        );

        painelCodigoFonte.setBackground(new java.awt.Color(38, 42, 51));

        areaCodigoFonte.setBackground(new java.awt.Color(38, 42, 51));
        areaCodigoFonte.setColumns(20);
        areaCodigoFonte.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        areaCodigoFonte.setForeground(new java.awt.Color(213, 206, 217));
        areaCodigoFonte.setRows(5);
        areaCodigoFonte.setBorder(null);
        jScrollPane2.setViewportView(areaCodigoFonte);

        javax.swing.GroupLayout painelCodigoFonteLayout = new javax.swing.GroupLayout(painelCodigoFonte);
        painelCodigoFonte.setLayout(painelCodigoFonteLayout);
        painelCodigoFonteLayout.setHorizontalGroup(
            painelCodigoFonteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        painelCodigoFonteLayout.setVerticalGroup(
            painelCodigoFonteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );

        painelSaida.setBackground(new java.awt.Color(35, 38, 46));

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "TOKEN", "CLASSE", "LINHA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabela.setSelectionBackground(new java.awt.Color(35, 38, 46));
        jScrollPane1.setViewportView(tabela);

        javax.swing.GroupLayout painelSaidaLayout = new javax.swing.GroupLayout(painelSaida);
        painelSaida.setLayout(painelSaidaLayout);
        painelSaidaLayout.setHorizontalGroup(
            painelSaidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        painelSaidaLayout.setVerticalGroup(
            painelSaidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelCodigoFonte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(painelSaida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(painelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(painelCodigoFonte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(painelSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoActionPerformed
       abrirArquivo();
    }//GEN-LAST:event_btnArquivoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        salvarArquivo();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        compilar();
    }//GEN-LAST:event_btnCompilarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
       limpar();
    }//GEN-LAST:event_btnLimparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analisador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analisador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analisador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analisador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Analisador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaCodigoFonte;
    private swing.Button btnArquivo;
    private swing.Button btnCompilar;
    private swing.Button btnLimpar;
    private swing.Button btnSalvar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbnLogo;
    private javax.swing.JPanel painelCodigoFonte;
    private javax.swing.JPanel painelMenu;
    private javax.swing.JPanel painelSaida;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables


    public void abrirArquivo() {
        abrirArquivo.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File file) {
                if (file.isDirectory()) {
                    return true;
                }
                String fileName = file.getName().toLowerCase();
                return fileName.endsWith(".pas"); // Aceita apenas arquivos com extensão .pas
            }

            @Override
            public String getDescription() {
                return "Arquivos Pascal (*.pas)";
            }
        });

        if (abrirArquivo.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File selectedFile = abrirArquivo.getSelectedFile();
        if (selectedFile != null && selectedFile.isFile()) {
            abrirArquivoSelecionado(selectedFile);
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, selecione um arquivo válido.");
        }
    }

    private void abrirArquivoSelecionado(File arquivo) {
        StringBuilder texto = new StringBuilder();
        try (Scanner scan = new Scanner(arquivo)) {
            while (scan.hasNextLine()) {
                texto.append(scan.nextLine()).append("\n");
            }
            // Define o texto lido na área de código fonte
            areaCodigoFonte.setText(texto.toString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Não foi possível ler o arquivo solicitado.");
            e.printStackTrace();
        }
    } 
   
    public void salvarArquivo() {
    if (abrirArquivo.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
        return;
    }

    String codigoFonte = areaCodigoFonte.getText();
    String nomePrograma = extrairNomePrograma(codigoFonte);
    
    if (nomePrograma.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Não foi possível determinar o nome do programa.");
        return;
    }

    String nomeArquivo = nomePrograma + ".pas";
    PrintWriter pw = null;
    try {
        pw = new PrintWriter(abrirArquivo.getSelectedFile().getParent() + "\\" + nomeArquivo);
        Scanner scan = new Scanner(codigoFonte);
        while (scan.hasNextLine()) {
            pw.print(scan.nextLine());

            if (scan.hasNextLine()) {
                pw.println();
            }
        }
        pw.flush();
        JOptionPane.showMessageDialog(this, "Arquivo salvo como " + nomeArquivo);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Não foi possível salvar o arquivo.");
        e.printStackTrace();
    } finally {
        if (pw != null) {
            pw.close();
        }
    }
    }

    private String extrairNomePrograma(String codigoFonte) {
        String nomePrograma = "";

        // Encontrar a linha que contém a palavra reservada 'program'
        Scanner scanner = new Scanner(codigoFonte);
        while (scanner.hasNextLine()) {
            String linha = scanner.nextLine().trim();
            if (linha.startsWith("program ")) {
                nomePrograma = linha.substring("program ".length()).trim();
                // Remover qualquer ponto e vírgula no final
                if (nomePrograma.endsWith(";")) {
                    nomePrograma = nomePrograma.substring(0, nomePrograma.length() - 1);
                }
                break;
            }
        }
        scanner.close();

        return nomePrograma;
    }


    public void limpar() {
        areaCodigoFonte.setText("");
    }
    
    
    public void compilar() {
        
        String codigoFonte = areaCodigoFonte.getText();
        AnalisadorLexico analisador = new AnalisadorLexico();
        analisador.analisarCodigoFonte(codigoFonte);

        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        model.setRowCount(0); 

        List<Token> tokens = analisador.getTokens();
        for (Token token : tokens) {
            model.addRow(new Object[]{token.getPalavra(), token.getClasse(), token.getLinha()});
        }

        List<String> erros = analisador.getErros();
        if (!erros.isEmpty()) {
            StringBuilder mensagemErros = new StringBuilder("Erros léxicos encontrados:\n");
            for (String erro : erros) {
                mensagemErros.append(erro).append("\n");
            }
            JOptionPane.showMessageDialog(this, mensagemErros.toString(), "Erros Léxicos", JOptionPane.ERROR_MESSAGE);
        }
        
    }

    

}
